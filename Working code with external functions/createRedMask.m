function [BW,maskedRGBImage] = createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 12-May-2025
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2lab(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 54.172;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 6.445;
channel2Max = 26.799;

% Define thresholds for channel 3 based on histogram settings
channel3Min = -6.813;
channel3Max = 12.653;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;
% Combine both masks
BW = imfill(BW,"holes");
BW = bwpropfilt(BW, 'Area', [350 2000]);
se = strel('rectangle',[3 2]);
% BW = imopen(BW, se);

if BW ~= 0
    BW = activecontour(RGB, BW,20,"Chan-vese", 'SmoothFactor',1.5);
end
BW = bwpropfilt(BW, 'Area', [350 2000]);
% BW = imopen(BW, se);
BW = imfill(BW,"holes");

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end
